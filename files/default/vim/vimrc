execute pathogen#infect()

set clipboard=unnamed

syntax on
set number
set relativenumber
autocmd InsertEnter * :set norelativenumber
autocmd InsertLeave * :set relativenumber

color Dracula
set background=dark

if $TERM == "xterm-256color"
  set t_Co=256
end

set tabstop=2
set shiftwidth=2
set expandtab

set nobackup
set nowritebackup
set noswapfile

cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Wq wq

set wildignore+=*/tmp/*,*/log/*

set hlsearch incsearch

let mapleader=","

" Use ack instead of grep
set grepprg=ack
let g:grep_cmd_opts = '--noheading'

" Show trailing whitespaces
set list listchars=tab:»·,trail:·,nbsp:·

" Open new split panes to right and bottom
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

let g:syntastic_ruby_checkers = ['mri', 'rubocop']

fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd FileType c,coffee,cpp,java,json,php,ruby,python,yaml autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

set modifiable

let g:gitgutter_realtime = 0
set updatetime=750

let g:ackhighlight = 1
let g:ackpreview = 1

" Save files with sudo
cmap w!! w !sudo tee > /dev/null %

" Allow files to be modified when hidden
set hidden

" Sets files referenced by quickfix list to the arglist
command! -nargs=0 -bar Qargs execute 'args' QuickfixFilenames()
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

" Vim tmux runner
let g:VtrUseVtrMaps = 1

" Vim spec runner
let g:spec_runner_dispatcher = 'VtrSendCommand! {command}'
map <Leader>tf <Plug>RunCurrentSpecFile
map <Leader>tt <Plug>RunFocusedSpec
map <Leader>tl <Plug>RunMostRecentSpec
